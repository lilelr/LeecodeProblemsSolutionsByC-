Find Median from Data Stream 295
  使用两个堆,即Java中的优先队列.
  一个最大堆,记录一个数组中处于中位数左边较小的数,其根节点为左边数中的最大值,即与中位数相邻的数.
  一个最小堆,记录一个数组中处于中位数右边较大的数,其根节点为右边数中的最小值,也是与中位数相邻的数.
  最大堆
PriorityQueue<Integer> max = new PriorityQueue<Integer>(10, Collections.reverseOrder());

  还用一个记录中位数的队列queue,记录中位数.

  当addNum时,num与中位数相比,小于则放入最大堆,大于或等于则放入最小堆

  然后两个堆的根元素与median队列三者进行个数调整,确保最大堆比最小堆的数的个数少1,确保总体数目为偶数时,
   有 中位数 = (median.peek() + min.peek()) / 2.0

  最大堆的数的个数比最小堆的数的个数多1,则
  while (max.size() != 0 && max.size() + 1 > min.size()) {
              min.offer(median.poll());
              median.offer(max.poll());
          }

          while (min.size() != 0 && max.size() + 1 < min.size()) {
              max.offer(median.poll());
              median.offer(min.poll());
          }


   Sliding Window Maximum 239
   dequeue 双端队列
   用一个最大堆记录被遍历的元素的最大值.重要的一个方法是可以把需要的条件添加到最大堆的元素构造中.
    private class Num implements Comparable<Num> {
           int val;
           int idx;


           public Num(int val, int idx) {
               this.val = val;
               this.idx = idx;

           }

           @Override
           public int compareTo(Num that) {
               return that.val - this.val;
           }
       }

   同样的思想可以运用到 Super Ugly Number 313 中. 用一个最小堆来保存之前ugly numbers,提高查找效率,从
   O(n) 提高到 O(logn)
   private class Num implements Comparable<Num> {
           int val;
           int idx;
           int p;

           public Num(int val,int idx,int p){
               this.val = val;
               this.idx = idx;
               this.p = p;
           }

           @Override
           public int compareTo(Num that) {
               return this.val - that.val;
           }
       }

2:

 347. Top K Frequent Elements

    // priority_queue
    vector<int> topKFrequent(vector<int> &nums, int k) {
        unordered_map<int, int> mymap;
        for (int num:nums) {
            mymap[num]++;
        }

        vector<int> res;
        // pair<first, second>: first is frequency, second is number
        priority_queue<pair<int, int>> pq;
        for (auto it = mymap.begin(); it != mymap.end(); it++) {
            pq.push(make_pair(it->second, it->first));
            if (pq.size() > (int) mymap.size() - k) {
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }

    // make_heap
    vector<int> topKFrequent2(vector<int> &nums, int k) {
        unordered_map<int, int> fq;
        auto cmp = [&](int a, int b) {
            return fq[a] > fq[b];
        };
        //priority_queue<int,vector<int>,function<bool(int,int)> >pq(cmp);
        for (auto ele:nums)
            fq[ele] += 1;

        vector<int> res;
        auto it = fq.begin();
        for (int i = 0; i < k; i++)
            res.push_back(it++->first);
        make_heap(res.begin(), res.end(), cmp);
        while (it != fq.end()) {
            if (fq[it->first] > fq[res.front()]) {
                pop_heap(res.begin(), res.end(), cmp);
                res.back() = it->first;
                push_heap(res.begin(), res.end(), cmp);
            }
            it++;
        }

        return res;
    }

   // range heap example
   #include <iostream>     // std::cout
   #include <algorithm>    // std::make_heap, std::pop_heap, std::push_heap, std::sort_heap
   #include <vector>       // std::vector

   int main () {
     int myints[] = {10,20,30,5,15};
     std::vector<int> v(myints,myints+5);

     std::make_heap (v.begin(),v.end());
     std::cout << "initial max heap   : " << v.front() << '\n';

     std::pop_heap (v.begin(),v.end()); v.pop_back();
     std::cout << "max heap after pop : " << v.front() << '\n';

     v.push_back(99); std::push_heap (v.begin(),v.end());
     std::cout << "max heap after push: " << v.front() << '\n';

     std::sort_heap (v.begin(),v.end());

     std::cout << "final sorted range :";
     for (unsigned i=0; i<v.size(); i++)
       std::cout << ' ' << v[i];

     std::cout << '\n';

     return 0;
   }

  373. Find K Pairs with Smallest Sums
    auto comp = [&nums2](pair<int, int> a, pair<int, int> b) {
               return (a.first + nums2[a.second]) > (b.first + nums2[b.second]);
           };
           priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> min_heap(comp);
           for (s = nums1.begin(); s != nums1.end(); s++) {
               min_heap.push(make_pair(*s, 0));
           }
           while (k-- > 0 && !min_heap.empty()) {
               auto idx_pair = min_heap.top();
               min_heap.pop();
               result.push_back(make_pair(idx_pair.first, nums2[idx_pair.second]));

 今日头条笔试

 PM 产品经理
 struct task {
     int pm_index;
     int raise_time;
     int priority;
     int period;
     int task_index;
     int pm_task_index;
     int end_time;

 //    bool operator < (const task& b) const{
 //        return raise_time <= b.raise_time;
 //    }
 };

 struct compare_task {

     bool operator()(const task &a, const task &b) {
     }
         return a.raise_time > b.raise_time; // 按提出时间早的优先排列 比较时采用逆反思维
     }
 };

 struct compare_task_inner {

     bool operator()(const task &a, const task &b) {
         if (a.priority != b.priority) {
             return a.priority < b.priority; // 按优先级高的排列
         } else {
             if (a.period != b.period) {
                 return a.period > b.period; // 按时长短的排列
             } else {
                 return a.raise_time > b.raise_time; // 按提出时间最先的排列
             }
         }
     }
 };

     priority_queue<task, vector<task>, compare_task> m_pq;
