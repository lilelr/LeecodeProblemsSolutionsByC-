1 直接用数组从0开始的下标思考问题
2 自己想的比看过往代码写得还快
3 考虑边界的问题

4 while 结合 cnt,cnt 从0 开始
  int cnt = 0;
        while (n) {
            n = (n & (n - 1));
            cnt++;
        }

5  int pre = ex>>1; 1个数除以2 乘以2， <<2

6 是不是 偶数
 if(ex & 0x1 ==奇数){
            res *= base;
        }

7 递归函数写法 写出递归式 fun(3,7) = fun1(3,3)*fun1(3*3) * 3;
double unsigned_int_power(double base, int ex){
          if(ex==0){
              return 1;
          }
          if(ex ==1){
              return base;
          }

          int pre = ex>>1;
          double res = unsigned_int_power(base,pre); // 栈前面出栈元素的递归结果，即使fun1
          res = res*res; // 根据递归式得到现在的结果
          if(ex & 0x1 ==1){
              res *= base;
          }
          return res;
      }

8 二维数组  逆序遍历
bool Find(int target, vector<vector<int> > array) {
        if( array.size() ==0) return false;
        int rows = array.size();
        int cols = array[0].size();

        bool found= false;

        int row = 0;
        int column = cols-1;

        while (row < rows && column >=0 ){
            if(array[row][column] == target){
                found = true;
                return found;
            }
            else if(array[row][column] > target){
                --column;
            }else{
                ++row;
            }
        }
        return found;

    }

9 栈的递归 从尾到头打印链表
 void add_list_from_tail_to_head(ListNode* head, vector<int>& res){
        if(head == nullptr) return;

        add_list_from_tail_to_head(head->next,res);
        res.push_back(head->val);
    }

    vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> res;
        add_list_from_tail_to_head(head, res);
        return res;
    }


   头脑中联想函数栈的叠加，或者把最后一次递归展开

10
   a数组 1,2,3,4
     4-1 = 3 ,3为{2，3，4} 的个数
     1+2 = 3 ，2 为{2，3} 的个数

11
  一个指向指针的指针，用来保存中间的指针值
 void ConvertNode(TreeNode* p_node, TreeNode** p_last_node_in_list){

12 map，set 变量 tmap, tset
   函数名：traverse
        Map<String, Integer> index = new HashMap();


13          vector<int> ans(k);
         // 记得copy函数先定义目标容器的数量大小
copy(tset.begin(),tset.end(),ans.begin());

14  mulitset 标准用法
   typedef multiset<int, greater<int>> int_set;
   typedef multiset<int, greater<int>>::iterator set_iterator;
 int_set tset;
        vector<int>::const_iterator iter = input.begin();
        for(;iter!= input.end();iter++){
            if(tset.size()<k){
                tset.insert(*iter);
            }else{
                set_iterator iter_greatest = tset.begin();
                if(*iter < *(tset.begin())){
                    tset.erase(iter_greatest);
                    tset.insert(*iter);
                }
            }
        }

15 char判断是否是数字
 while (!isdigit(str[i]))
                ++i;

16 读入一行
  string str;
    while (getline(cin, str)) {

17 判断一个int 数是否溢出
                    if (((minus > 0) && (num > 0x7FFFFFFF)) || ((minus < 0) && (num > 0x80000000))) {

18 num = num*10 + str[i]-'0'
 等价于                    num = (num << 1) + (num << 3) + ((*cstr) & 0xf);


19 vecotor 排序
        sort(numbers.begin(),numbers.end());
           sort(numbers.begin(),numbers.end()，compare);  less, great

20 map 插入
 map<char, int> last_pos_map;
        for (int i = 0; i < len; i++) {
            if(last_pos_map.find(s[i])==last_pos_map.end()){
                last_pos_map.insert({s[i], i});
            }else{
                last_pos_map[s[i]] = i;
            }
        }

   map 查找
    int find_min_last_pos(map<char, int> &last_pos_map) {
           if (last_pos_map.empty()) return -1;
           int min_last_pos = INT_MAX;
           auto it = last_pos_map.begin();
           for (; it != last_pos_map.end(); it++) {
               min_last_pos = min(min_last_pos, it->second);
           }
           return min_last_pos;
       }


21 dfs
算法岗两道编程题，一道是八卦阵，矩阵中有八个不相连的区域，每个区域由相邻的大于零的数字组成，区域与区域之间由零隔开，求这些区域的和的最大值和最小值是多少。
 int single(int i, int j) {
           if (i < 0 || i >= m || j < 0 || j >= n || mat[i][j] == 0)
               return 0;
           int t = mat[i][j];
           mat[i][j] = 0;
           // 上下左右遍历
           for (int a = -1; a <= 1; a++)
               for (int b = -1; b <= 1; b++)
                   t += single(i + a, j + b);
           return t;
   }


22 lower_bound upper_bound 二分查找实现 log(N)
auto cmp = [](Interval a, Interval b) { return a.end + 1 < b.start; };
        auto it0 = lower_bound(intervals.begin(), intervals.end(), newInterval, cmp); >= newInterval 的第一个元素的下标
        auto it1 = upper_bound(intervals.begin(), intervals.end(), newInterval, cmp);
        > newInterval 的第一个元素的下标


23 frog_jump 403
hashmap 与 set 初始化
 unordered_map<int, set<int>> m;
        for (auto x: stones) m[x] = {};

   m[0].insert(0);
          for (int i = 0; i < n; i++) {
              for (int last_step: m[stones[i]]) {
                  for (int next_step = last_step - 1; next_step <= last_step + 1; next_step++) {
                      if (next_step > 0 && m.count(stones[i] + next_step)) {
                          m[stones[i] + next_step].insert(next_step);
                      }
                  }
              }
          }
          bool res = !m[stones[n - 1]].empty();
          return res;


 24
    #include <sstream>
        stringstream& s;
                string str;
         getline(s, str, ',');

      TreeNode* deserialize(string data) {
             if (data == "#") return NULL;
             stringstream s(data);
             return makeDeserialize(s);
         }

         TreeNode* makeDeserialize(stringstream& s) {
             string str;
             getline(s, str, ',');
             if (str == "#") {
                 return NULL;
             } else {
                 TreeNode* root = new TreeNode(stoi(str));
                 root->left = makeDeserialize(s);
                 root->right = makeDeserialize(s);
                 return root;
             }
         }


25
834. Sum of Distances in Tree
   一棵多叉树的定义和 dfs 定义下的先序和后序遍历


26 dp分析画图 ， 一张纸分成两部分
   for 循环迭代 i 0,1,3
      dp[] 从 1开始 1，2，3
      i 每次循环画一条横线， hash 记录画在右边， key 和value 用箭头指向
      特许情况用 "若"
      箭头指明关系
      中括号，括号


27 make pair
   vector 逆序排序 rbegin(), rend()
      vector<pair<int, int>> sorted;
           for (int i = 0 ; i < indexes.size(); i++) sorted.push_back(make_pair(indexes[i], i));
           sort(sorted.rbegin(), sorted.rend());


28 堆排序
   347. Top K Frequent Elements

    // priority_queue
    vector<int> topKFrequent(vector<int> &nums, int k) {
        unordered_map<int, int> mymap;
        for (int num:nums) {
            mymap[num]++;
        }

        vector<int> res;
        // pair<first, second>: first is frequency, second is number
        priority_queue<pair<int, int>> pq;
        for (auto it = mymap.begin(); it != mymap.end(); it++) {
            pq.push(make_pair(it->second, it->first));
            if (pq.size() > (int) mymap.size() - k) {
                res.push_back(pq.top().second);
                pq.pop();
            }
        }
        return res;
    }

    // make_heap
    vector<int> topKFrequent2(vector<int> &nums, int k) {
        unordered_map<int, int> fq;
        auto cmp = [&](int a, int b) {
            return fq[a] > fq[b];
        };
        //priority_queue<int,vector<int>,function<bool(int,int)> >pq(cmp);
        for (auto ele:nums)
            fq[ele] += 1;

        vector<int> res;
        auto it = fq.begin();
        for (int i = 0; i < k; i++)
            res.push_back(it++->first);
        make_heap(res.begin(), res.end(), cmp);
        while (it != fq.end()) {
            if (fq[it->first] > fq[res.front()]) {
                pop_heap(res.begin(), res.end(), cmp);
                res.back() = it->first;
                push_heap(res.begin(), res.end(), cmp);
            }
            it++;
        }

        return res;
    }

   // range heap example
   #include <iostream>     // std::cout
   #include <algorithm>    // std::make_heap, std::pop_heap, std::push_heap, std::sort_heap
   #include <vector>       // std::vector

   int main () {
     int myints[] = {10,20,30,5,15};
     std::vector<int> v(myints,myints+5);

     std::make_heap (v.begin(),v.end());
     std::cout << "initial max heap   : " << v.front() << '\n';

     std::pop_heap (v.begin(),v.end()); v.pop_back();
     std::cout << "max heap after pop : " << v.front() << '\n';

     v.push_back(99); std::push_heap (v.begin(),v.end());
     std::cout << "max heap after push: " << v.front() << '\n';

     std::sort_heap (v.begin(),v.end());

     std::cout << "final sorted range :";
     for (unsigned i=0; i<v.size(); i++)
       std::cout << ' ' << v[i];

     std::cout << '\n';

     return 0;
   }

29 二分查找
C++中lower_bound函数和upper_bound函数
https://blog.csdn.net/u013475704/article/details/46458723

30
set ,map find 函数 找到 !=end() ; 没找到 == end()
g_set.find(head->val) != g_set.end()

31 if(!group_start) group_start 为false


32 标准库函数返回开始和结束指针的begin() 和end() 结合花括号初始化 set
  vector<int> av={1,2,3,4};
    unordered_set<int> uorder_set{begin(av),end(av)};
    cout<<"------------"<<endl;
    for(auto it=uorder_set.begin();it!=uorder_set.end();it++){
        cout<<*it<<endl;
    }

33

矩阵图 判断越界和遍历
 法1：vector<pair<int, int>> move(int x, int y) {
        vector<pair<int, int> > res;
        for (auto p: vector<vector<int>> {{1,  0},
                                          {-1, 0},
                                          {0,  1},
                                          {0,  -1}}) {
            if (valid(x + p[0], y + p[1])) {
                res.push_back(make_pair(x + p[0], y + p[1]));
            }
        }
        return res;
    };

    int valid(int x, int y) {
        return 0 <= x && x < N && 0 <= y && y < N;
    }

  法2：
   vector<int> dir({-1, 0, 1, 0, -1});
          pq.push({ans, 0, 0});
          while (!pq.empty()) {
              auto cur = pq.top();
              pq.pop();
              ans = max(ans, cur[0]);
              for (int i = 0; i < 4; ++i) {
                  int r = cur[1] + dir[i], c = cur[2] + dir[i+1];
                  if (r >= 0 && r < n && c >= 0 && c < n && visited[r][c] == 0) {
                      if (r == n-1 && c == n-1) return ans;
                      pq.push({grid[r][c], r, c});
                      visited[r][c] = 1;
                  }
              }
          }

34 priorty_queue 最小堆 greater
 #include <iostream>
 #include <queue>
 using namespace std;

 struct compare
 {
   bool operator()(const int& l, const int& r)
   {
       return l > r;
   }
 };

 int main()
 {
     priority_queue<int,vector<int>, compare > pq;

     pq.push(3);
     pq.push(5);
     pq.push(1);
     pq.push(8);
     while ( !pq.empty() )
     {
         cout << pq.top() << endl;
         pq.pop();
     }
     cin.get();
 }


set 也一样
const int maxn = 0x3f3f3f3f;

struct compare{
    bool operator()(const pair<int,int>& l, const pair<int,int>& r){
        if(r.second!=l.second){
            return r.second<l.second; // 要从大到小排序，就反着写
        }else{
            return r.first<l.first;
        }
    }
};

set 默认从小到大排序
int main() {
    set<pair<int,int>>::iterator it;
    set<pair<int,int>,compare> my_set;
    my_set.insert(make_pair(1,3));
    my_set.insert(make_pair(2,3));
    my_set.insert(make_pair(1,-10));
    my_set.insert(make_pair(2,-4));

    for(it=my_set.begin();it!=my_set.end();it++){
        cout<<it->first<<" "<<it->second<<endl;
    }
    set<pair<int,int>>::iterator up_pair_it = my_set.upper_bound(make_pair(1,4));
    cout<<up_pair_it->first<<" "<<up_pair_it->second;
    return 0;

 35
 千万不要用memset函数对二维数组进行初始化
 2018年03月01日 17:27:35
 阅读数：549
 memset函数的初始化只能对一维数组，对于每一行，是连续分配的； 然而对于各行之间，却不是连续非配的，容易出错

 36
 0x3f3f3f3f还能给我们带来一个意想不到的额外好处：如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))这样的代码来实现（方便而高效），但是当我们想将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的初始化），就不能使用memset函数而得自己写循环了（写这些不重要的代码真的很痛苦），我们知道这是因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0，现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要。
 所以在通常的场合下，0x3f3f3f3f真的是一个非常棒的选择。
 memset(a,0x3f,sizeof(a))
 负无穷大用0xcfcfcfcf比较好。

 37
 注意一定要结构体引用，写成 Manager cur_manager = pms[i] 则会造成复制 pms[i] 给临时变量 cur_manager, 从而无法真正修改 pms[i] 的值

 38
 1e9 是科学计数法
 表示1乘10的9次幂
 然后再加7
 表示浮点数
 1000000007

 float low = 1e-9;
 float high = 1e9;


39
runtime  error （运行时错误）就是程序运行到一半，程序就崩溃了。
比如说：
①除以零
②数组越界：int a[3]; a[10000000]=10;
③指针越界：int * p; p=(int *)malloc(5 * sizeof(int)); *(p+1000000)=10;
④使用已经释放的空间：int * p; p=(int *)malloc(5 * sizeof(int));free(p); *p=10;
⑤数组开得太大，超出了栈的范围，造成栈溢出：int a[100000000];


40 命名
step,total

41
bfs 初始化visited 数组
  unordered_map<string, bool> visited;
        for (string gene : bank) {
            visited[gene] = false;
        }

42
回溯模板
class Solution {
public:
    vector<vector<string>> res;// 所有可能的结果集的集合
    vector<string> cur_vec; // 一个可能的结果集
    vector<vector<string>> partition(string s) {

    back_track(s,0);
        return res;
    }

    /**
     *
     * @param s 字符串
     * @param l 开始位置
     */
    void back_track(string s, int l){
        if(cur_vec.size() > 0 && l>=s.length()){
            vector<string> r = cur_vec;
            res.push_back(r);
        }

        for(int i=l;i<s.length();i++){
                if(is_palindrome(s,l,i)){ // 是回文
                    cur_vec.push_back(s.substr(l,i+1-l));
//                    if(l==i){
//                        cur_vec.push_back(s[i]+"");
//                    }else{
//                        cur_vec.push_back(s.substr(l,i+1));
//                    }

                    back_track(s,i+1);
                    cur_vec.erase(cur_vec.end()-1); // 回溯
                }
        }
    }

    /**
     * 判断输入的字符串[l,r] 区间是否是回文
     * @param str
     * @param l
     * @param r
     * @return
     */
    bool is_palindrome(string str, int l,int r){
        if(l==r) return true;
        while (l<r){
            if(str[l]!=str[r])return false;
            l++;
            r--;
        }
        return true;

    }
};
